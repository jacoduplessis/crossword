/* App.html generated by Svelte v1.40.1 */
var Crossword = (function() { "use strict";

	function range(n) {
  return Array.from(Array(n).keys())
}

function flatten(A) {
  return A.reduce((agg, a) => agg.concat(a), [])
}

function transposeTables(numRows, numColumns) {

  const N = numRows * numColumns
  const A = range(N)
  const columns = Array(numColumns).fill(0).map(() => [])

  A.forEach((a, i) => {
    columns[i % numRows].push(a)
  })

  const rotate90 = flatten(columns.map(col => col.slice(0).reverse()))
  const rotate270 = rotate90.slice(0).reverse()
  const rotate180 = A.slice(0).reverse()

  return {
    "90": rotate90,
    "180": rotate180,
    "270": rotate270,
  }
}

function size(rows, columns) {
		return rows * columns;
	}

	function transpose(symmetric, rows, columns) {
  if (!symmetric || (rows !== columns)) return {}
  return transposeTables(rows, columns)
}

	function shareURL(rows, columns, values) {
  return document.location.origin +
    document.location.pathname + `?r=${rows}&c=${columns}&v=${values.join('')}`
};

	function data() {
  return {
    rows: 13,
    columns: 13,
    values: [],
    blacks: [],
    numbers: [],
    symmetric: true,
    info: '',
    showShare: false,
    showOptions: false,
    showHelp: false,
  }
};

	var methods = {
  indexAbove(index) {
    return Math.max(0, index - this.get('columns'))
  },
  indexBelow(index) {
    return Math.min(this.get('size'), index + this.get('columns'))
  },
  indexRight(index) {
    return Math.min(this.get('size'), index + 1)
  },
  indexLeft(index) {
    return Math.max(0, index - 1)
  },
  moveFocus(event, index) {
    const keyCode = event.keyCode
    if (keyCode === 37) this.focusLeft(index)
    else if (keyCode === 38) this.focusUp(index)
    else if (keyCode === 39) this.focusRight(index)
    else if (keyCode === 40) this.focusDown(index)
  },
  focusDown(index) {
    this.focus(this.indexBelow(index))
  },
  focusUp(index) {
    this.focus(this.indexAbove((index)))
  },
  focusRight(index) {
    this.focus(this.indexRight(index))
  },
  focusLeft(index) {
    this.focus(this.indexLeft(index))
  },
  rowIndex(index) {
    return Math.floor(index / this.get('columns'))
  },
  columnIndex(index) {
    return index % this.get('columns')
  },
  cellRight(index) {
    return this.columnIndex(index) === this.get('size') - 1 ? false : !this.get('blacks')[this.indexRight(index)]
  },
  cellBelow(index) {
    return this.rowIndex(index) === this.get('size') - 1 ? false : !this.get('blacks')[this.indexBelow(index)]
  },
  cellLeft(index) {
    return this.columnIndex(index) === 0 ? false : !this.get('blacks')[this.indexLeft(index)]
  },
  cellAbove(index) {
    return this.rowIndex(index) === 0 ? false : !this.get('blacks')[this.indexAbove(index)]
  },
  openCellRight(index) { return this.cellRight(index) && this.get('values')[this.indexRight(index)] === '-'},
  openCellBelow(index) { return this.cellBelow(index) && this.get('values')[this.indexBelow(index)] === '-'},

  didFocus(event, index) {
    event.target.select()
    const info = `
index: ${index}
row: ${this.rowIndex(index)}
column: ${this.columnIndex(index)}
cellLeft: ${this.cellLeft(index)}
cellRight: ${this.cellRight(index)}
cellAbove: ${this.cellAbove(index)}
cellBelow: ${this.cellBelow(index)}
openRight: ${this.openCellRight(index)}
openBelow: ${this.openCellBelow(index)}
black: ${this.get('blacks')[index]}
indexBelow: ${this.indexBelow(index)}
`
    this.set({info})
  },
  focus(index) {
    const el = document.querySelector(`#cell-${index}`)
    if (el) {
      el.focus()
      el.select()
    }
  },
  moveToNext(index) {
    if (!this.openCellRight(index) && this.openCellBelow(index)) return this.focus(this.indexBelow(index))
    if (!this.cellRight(index) && this.cellBelow(index)) return this.focus(this.indexBelow(index))
    this.focus(this.indexRight(index))
  },
  process(event, index) {

    const value = event.target.value.trim() || "-"
    const values = this.get('values')
    values.splice(index, 1, value)
    this.set({values})
    this.moveToNext(index)
    const wasBlack = !!this.get('blacks')[index]
    const black = value === '.'
    if ((black && !wasBlack) || (!black && wasBlack)) {
      this.processBlack(index, black)
      this.updateNumbers()
    }
  },
  processBlack(index, black) {
    const blacks = this.get('blacks')
    blacks.splice(index, 1, black)
    if (this.get('symmetric')) {
      const transpose = this.get('transpose')
      const other = [
        transpose['90'][index],
        transpose['180'][index],
        transpose['270'][index],
      ]
      const replacement = black ? '.' : '-'
      const values = this.get('values')
      other.forEach(i => {
        blacks.splice(i, 1, black)
        values.splice(i, 1, replacement)
      })
      this.set({values})
    }
    this.set({blacks})
  },

  updateGrid() {
    const rows = this.get('rows')
    const columns = this.get('columns')
    const symmetric = this.get('symmetric') && (rows === columns)
    this.set({symmetric})
    this.refs.grid.style['grid-template-rows'] = `repeat(${rows}, 40px)`
    this.refs.grid.style['grid-template-columns'] = `repeat(${columns}, 40px)`
  },
  clear() {
    const size = this.get('size')
    this.set({
      values: Array(size).fill("-"),
      blacks: Array(size).fill(false),
      numbers: Array(size).fill(0),
    })
  },
  save(event) {
    const btn = event.target
    localStorage.setItem('backup', JSON.stringify({
      rows: this.get('rows'),
      columns: this.get('columns'),
      values: this.get('values'),
    }))
    btn.style.backgroundColor = 'darkseagreen'
    setTimeout(() => btn.style.backgroundColor = '', 1000)

  },
  share() {
    if (this.get('showShare')) return this.set({showShare: false})

    this.set({showShare: true})
    setTimeout(() => this.refs.share.select(), 10)
  },
  copy() {
    this.refs.share.select()
    document.execCommand('copy')
  },
  loadFromStorage() {
    const backup = JSON.parse(localStorage.getItem('backup'))
    this.load(backup.rows, backup.columns, backup.values)
  },
  load(rows, columns, values) {
    this.set({
      rows,
      columns,
      values,
      blacks: values.map(v => v === '.'),
    })
    this.updateNumbers()
  },
  updateNumbers() {

    let counter = 1;
    const blacks = this.get('blacks')
    const numbers = Array(this.get('size')).fill(0)
    blacks.forEach((black, index) => {
      if (black) return 0

      // horizontal || vertical
      if ((this.cellRight(index) && !this.cellLeft(index)) ||
        (this.cellBelow(index) && !this.cellAbove(index))) {
        numbers[index] = counter
        counter++
      }

    })
    this.set({numbers})
  }
};

	function oncreate() {
  this.clear()
  const u = new URL(document.location)
  const r = u.searchParams.get('r')
  const c = u.searchParams.get('c')
  const v = u.searchParams.get('v')
  if (v && r && c) {
    this.load(parseInt(r), parseInt(c), v.split(''))
  }
  this.observe('rows', this.updateGrid)
  this.observe('columns', this.updateGrid)
};

	function encapsulateStyles(node) {
		setAttribute(node, "svelte-2428691545", "");
	}

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-2428691545-style';
		style.textContent = "[svelte-2428691545]{box-sizing:border-box;font-family:monospace}input[svelte-2428691545]{padding:.5rem 0.8rem;border:1px solid #000}.cell[svelte-2428691545]{text-transform:uppercase;font-size:20px;font-weight:600;width:100%}.cell[svelte-2428691545]:focus{background-color:lightyellow}.black[svelte-2428691545]{background-color:#000 !important;color:#000 !important}.empty[svelte-2428691545]{color:#fff !important}.grid[svelte-2428691545]{display:grid;grid-gap:0;justify-content:center}#container[svelte-2428691545]{padding:1rem;max-width:800px;margin-left:auto;margin-right:auto}label[svelte-2428691545]{margin-left:0.6rem;margin-right:0.3rem}button[svelte-2428691545],label[svelte-2428691545]{text-transform:uppercase;font-weight:600}button[svelte-2428691545]{padding:0.5rem 0.8rem;background-color:rgba(0, 0, 0, 0);border:1px solid #000}button[svelte-2428691545]:hover{background-color:lightsteelblue;cursor:pointer}button.active[svelte-2428691545]{background-color:black;color:white}.cell-container[svelte-2428691545]{position:relative}.cell-number[svelte-2428691545]{position:absolute;font-size:0.7rem;font-weight:600;top:0.1rem;left:0.2rem}.help[svelte-2428691545]{margin-bottom:1rem;max-width:600px;margin-left:auto;margin-right:auto;padding:1rem;border:1px solid black}";
		appendNode(style, document.head);
	}

	function create_main_fragment(state, component) {
		var div, button, button_class_value, text_1, button_1, text_3, button_2, text_5, button_3, text_7, button_4, button_4_class_value, text_9, button_5, button_5_class_value, text_12, text_13, text_14, text_15, pre, text_16, text_17, div_1;

		function click_handler(event) {
			var state = component.get();
			component.set({showOptions: !state.showOptions});
		}

		function click_handler_1(event) {
			component.clear();
		}

		function click_handler_2(event) {
			component.save(event);
		}

		function click_handler_3(event) {
			component.loadFromStorage();
		}

		function click_handler_4(event) {
			var state = component.get();
			component.set({showHelp: !state.showHelp});
		}

		function click_handler_5(event) {
			component.share();
		}

		var if_block = (state.showOptions) && create_if_block(state, component);

		var if_block_1 = (state.showShare) && create_if_block_1(state, component);

		var if_block_2 = (state.showHelp) && create_if_block_2(state, component);

		var each_value = state.values.slice(0, state.size);

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(state, each_value, each_value[i], i, component);
		}

		return {
			c: function create() {
				div = createElement("div");
				button = createElement("button");
				button.textContent = "options";
				text_1 = createText("\n  ");
				button_1 = createElement("button");
				button_1.textContent = "clear";
				text_3 = createText("\n  ");
				button_2 = createElement("button");
				button_2.textContent = "save";
				text_5 = createText("\n  ");
				button_3 = createElement("button");
				button_3.textContent = "load";
				text_7 = createText("\n  ");
				button_4 = createElement("button");
				button_4.textContent = "help";
				text_9 = createText("\n  ");
				button_5 = createElement("button");
				button_5.textContent = "share";
				text_12 = createText("\n\n");
				if (if_block) if_block.c();
				text_13 = createText("\n\n");
				if (if_block_1) if_block_1.c();
				text_14 = createText("\n\n");
				if (if_block_2) if_block_2.c();
				text_15 = createText("\n\n");
				pre = createElement("pre");
				text_16 = createText(state.info);
				text_17 = createText("\n");
				div_1 = createElement("div");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(div);
				setStyle(div, "text-align", "center");
				setStyle(div, "margin-bottom", "1rem");
				encapsulateStyles(button);
				button.className = button_class_value = state.showOptions ? 'active' : '';
				addListener(button, "click", click_handler);
				encapsulateStyles(button_1);
				addListener(button_1, "click", click_handler_1);
				encapsulateStyles(button_2);
				addListener(button_2, "click", click_handler_2);
				encapsulateStyles(button_3);
				addListener(button_3, "click", click_handler_3);
				encapsulateStyles(button_4);
				button_4.className = button_4_class_value = state.showHelp ? 'active' : '';
				addListener(button_4, "click", click_handler_4);
				encapsulateStyles(button_5);
				button_5.className = button_5_class_value = state.showShare ? 'active' : '';
				addListener(button_5, "click", click_handler_5);
				encapsulateStyles(pre);
				setStyle(pre, "position", "fixed");
				setStyle(pre, "left", "10px");
				setStyle(pre, "top", "10px");
				encapsulateStyles(div_1);
				div_1.className = "grid";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(button, div);
				appendNode(text_1, div);
				appendNode(button_1, div);
				appendNode(text_3, div);
				appendNode(button_2, div);
				appendNode(text_5, div);
				appendNode(button_3, div);
				appendNode(text_7, div);
				appendNode(button_4, div);
				appendNode(text_9, div);
				appendNode(button_5, div);
				insertNode(text_12, target, anchor);
				if (if_block) if_block.m(target, anchor);
				insertNode(text_13, target, anchor);
				if (if_block_1) if_block_1.m(target, anchor);
				insertNode(text_14, target, anchor);
				if (if_block_2) if_block_2.m(target, anchor);
				insertNode(text_15, target, anchor);
				insertNode(pre, target, anchor);
				appendNode(text_16, pre);
				insertNode(text_17, target, anchor);
				insertNode(div_1, target, anchor);
				component.refs.grid = div_1;

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div_1, null);
				}
			},

			p: function update(changed, state) {
				if ((changed.showOptions) && button_class_value !== (button_class_value = state.showOptions ? 'active' : '')) {
					button.className = button_class_value;
				}

				if ((changed.showHelp) && button_4_class_value !== (button_4_class_value = state.showHelp ? 'active' : '')) {
					button_4.className = button_4_class_value;
				}

				if ((changed.showShare) && button_5_class_value !== (button_5_class_value = state.showShare ? 'active' : '')) {
					button_5.className = button_5_class_value;
				}

				if (state.showOptions) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block(state, component);
						if_block.c();
						if_block.m(text_13.parentNode, text_13);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				if (state.showShare) {
					if (if_block_1) {
						if_block_1.p(changed, state);
					} else {
						if_block_1 = create_if_block_1(state, component);
						if_block_1.c();
						if_block_1.m(text_14.parentNode, text_14);
					}
				} else if (if_block_1) {
					if_block_1.u();
					if_block_1.d();
					if_block_1 = null;
				}

				if (state.showHelp) {
					if (!if_block_2) {
						if_block_2 = create_if_block_2(state, component);
						if_block_2.c();
						if_block_2.m(text_15.parentNode, text_15);
					}
				} else if (if_block_2) {
					if_block_2.u();
					if_block_2.d();
					if_block_2 = null;
				}

				if (changed.info) {
					text_16.data = state.info;
				}

				var each_value = state.values.slice(0, state.size);

				if (changed.numbers || changed.blacks || changed.values || changed.event || changed.size) {
					for (var i = 0; i < each_value.length; i += 1) {
						if (each_blocks[i]) {
							each_blocks[i].p(changed, state, each_value, each_value[i], i);
						} else {
							each_blocks[i] = create_each_block(state, each_value, each_value[i], i, component);
							each_blocks[i].c();
							each_blocks[i].m(div_1, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}
			},

			u: function unmount() {
				detachNode(div);
				detachNode(text_12);
				if (if_block) if_block.u();
				detachNode(text_13);
				if (if_block_1) if_block_1.u();
				detachNode(text_14);
				if (if_block_2) if_block_2.u();
				detachNode(text_15);
				detachNode(pre);
				detachNode(text_17);
				detachNode(div_1);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}
			},

			d: function destroy() {
				removeListener(button, "click", click_handler);
				removeListener(button_1, "click", click_handler_1);
				removeListener(button_2, "click", click_handler_2);
				removeListener(button_3, "click", click_handler_3);
				removeListener(button_4, "click", click_handler_4);
				removeListener(button_5, "click", click_handler_5);
				if (if_block) if_block.d();
				if (if_block_1) if_block_1.d();
				if (if_block_2) if_block_2.d();
				if (component.refs.grid === div_1) component.refs.grid = null;

				destroyEach(each_blocks);
			}
		};
	}

	// (10:0) {{#if showOptions}}
	function create_if_block(state, component) {
		var div, label, text_1, input, input_updating = false, text_2, label_1, text_4, input_1, input_1_updating = false, text_5, label_2, text_7, input_2, input_2_disabled_value;

		function input_input_handler() {
			input_updating = true;
			component.set({ rows: toNumber(input.value) });
			input_updating = false;
		}

		function input_1_input_handler() {
			input_1_updating = true;
			component.set({ columns: toNumber(input_1.value) });
			input_1_updating = false;
		}

		function input_2_change_handler() {
			component.set({ symmetric: input_2.checked });
		}

		return {
			c: function create() {
				div = createElement("div");
				label = createElement("label");
				label.textContent = "Rows";
				text_1 = createText("\n  ");
				input = createElement("input");
				text_2 = createText("\n  ");
				label_1 = createElement("label");
				label_1.textContent = "Columns";
				text_4 = createText("\n  ");
				input_1 = createElement("input");
				text_5 = createText("\n  ");
				label_2 = createElement("label");
				label_2.textContent = "Symmetric";
				text_7 = createText("\n  ");
				input_2 = createElement("input");
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(div);
				setStyle(div, "display", "flex");
				setStyle(div, "align-items", "center");
				setStyle(div, "justify-content", "center");
				setStyle(div, "margin-bottom", "1rem");
				encapsulateStyles(label);
				encapsulateStyles(input);
				input.name = "rows";
				input.type = "number";
				input.step = "1";
				input.min = "2";
				input.max = "30";
				setStyle(input, "min-width", "50px");
				addListener(input, "input", input_input_handler);
				encapsulateStyles(label_1);
				encapsulateStyles(input_1);
				input_1.name = "columns";
				input_1.type = "number";
				input_1.step = "1";
				input_1.min = "2";
				input_1.max = "30";
				setStyle(input_1, "min-width", "50px");
				addListener(input_1, "input", input_1_input_handler);
				encapsulateStyles(label_2);
				encapsulateStyles(input_2);
				input_2.type = "checkbox";
				input_2.disabled = input_2_disabled_value = state.rows !== state.columns;
				addListener(input_2, "change", input_2_change_handler);
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(label, div);
				appendNode(text_1, div);
				appendNode(input, div);

				input.value = state.rows;

				appendNode(text_2, div);
				appendNode(label_1, div);
				appendNode(text_4, div);
				appendNode(input_1, div);

				input_1.value = state.columns;

				appendNode(text_5, div);
				appendNode(label_2, div);
				appendNode(text_7, div);
				appendNode(input_2, div);

				input_2.checked = state.symmetric;
			},

			p: function update(changed, state) {
				if (!input_updating) {
					input.value = state.rows;
				}

				if (!input_1_updating) {
					input_1.value = state.columns;
				}

				if ((changed.rows || changed.columns) && input_2_disabled_value !== (input_2_disabled_value = state.rows !== state.columns)) {
					input_2.disabled = input_2_disabled_value;
				}

				input_2.checked = state.symmetric;
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(input, "input", input_input_handler);
				removeListener(input_1, "input", input_1_input_handler);
				removeListener(input_2, "change", input_2_change_handler);
			}
		};
	}

	// (21:0) {{#if showShare}}
	function create_if_block_1(state, component) {
		var div, input, input_updating = false, text, button, text_2, button_1;

		function input_input_handler() {
			input_updating = true;
			component.set({ shareURL: input.value });
			input_updating = false;
		}

		function click_handler(event) {
			component.copy();
		}

		function click_handler_1(event) {
			component.set({showShare: false});
		}

		return {
			c: function create() {
				div = createElement("div");
				input = createElement("input");
				text = createText("\n  ");
				button = createElement("button");
				button.textContent = "copy";
				text_2 = createText("\n  ");
				button_1 = createElement("button");
				button_1.textContent = "hide";
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(div);
				setStyle(div, "display", "flex");
				setStyle(div, "margin-bottom", "1rem");
				setStyle(div, "max-width", "600px");
				setStyle(div, "margin-left", "auto");
				setStyle(div, "margin-right", "auto");
				encapsulateStyles(input);
				setStyle(input, "flex-grow", "1");
				addListener(input, "input", input_input_handler);
				encapsulateStyles(button);
				setStyle(button, "margin-left", "0.3rem");
				addListener(button, "click", click_handler);
				encapsulateStyles(button_1);
				setStyle(button_1, "margin-left", "0.3rem");
				addListener(button_1, "click", click_handler_1);
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(input, div);
				component.refs.share = input;

				input.value = state.shareURL;

				appendNode(text, div);
				appendNode(button, div);
				appendNode(text_2, div);
				appendNode(button_1, div);
			},

			p: function update(changed, state) {
				if (!input_updating) {
					input.value = state.shareURL;
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(input, "input", input_input_handler);
				if (component.refs.share === input) component.refs.share = null;
				removeListener(button, "click", click_handler);
				removeListener(button_1, "click", click_handler_1);
			}
		};
	}

	// (29:0) {{#if showHelp}}
	function create_if_block_2(state, component) {
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<p svelte-2428691545>Enter a dot make a cell black.</p>\n    <p svelte-2428691545>Navigate with arrow keys.</p>";
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(div);
				div.className = "help";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (39:4) {{#each values.slice(0, size) as val, index}}
	function create_each_block(state, each_value, val, index, component) {
		var div, text, input, input_class_value, input_id_value, input_updating = false;

		var if_block = (state.numbers[index] !== 0) && create_if_block_3(state, each_value, val, index, component);

		function input_input_handler() {
			input_updating = true;
			var list = input._svelte.each_value;
			var index = input._svelte.index;
			list[index] = input.value;

			component.set({values: component.get('values'), size: component.get('size') });
			input_updating = false;
		}

		return {
			c: function create() {
				div = createElement("div");
				if (if_block) if_block.c();
				text = createText("\n    ");
				input = createElement("input");
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(div);
				div.className = "cell-container";
				encapsulateStyles(input);
				input.className = input_class_value = "cell " + (state.blacks[index] ? 'black' : '') + " " + (state.values[index] === '-' ? 'empty' : '');
				input.id = input_id_value = "cell-" + index;
				addListener(input, "input", input_input_handler);
				addListener(input, "input", input_handler);
				addListener(input, "focus", focus_handler);
				addListener(input, "keyup", keyup_handler);

				input._svelte = {
					component: component,
					each_value: each_value,
					index: index
				};
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				if (if_block) if_block.m(div, null);
				appendNode(text, div);
				appendNode(input, div);

				input.value = val;
			},

			p: function update(changed, state, each_value, val, index) {
				if (state.numbers[index] !== 0) {
					if (if_block) {
						if_block.p(changed, state, each_value, val, index);
					} else {
						if_block = create_if_block_3(state, each_value, val, index, component);
						if_block.c();
						if_block.m(div, text);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				if ((changed.blacks || changed.values) && input_class_value !== (input_class_value = "cell " + (state.blacks[index] ? 'black' : '') + " " + (state.values[index] === '-' ? 'empty' : ''))) {
					input.className = input_class_value;
				}

				if (!input_updating) {
					input.value = val;
				}

				input._svelte.each_value = each_value;
				input._svelte.index = index;
			},

			u: function unmount() {
				detachNode(div);
				if (if_block) if_block.u();
			},

			d: function destroy() {
				if (if_block) if_block.d();
				removeListener(input, "input", input_input_handler);
				removeListener(input, "input", input_handler);
				removeListener(input, "focus", focus_handler);
				removeListener(input, "keyup", keyup_handler);
			}
		};
	}

	// (41:4) {{#if numbers[index] !== 0}}
	function create_if_block_3(state, each_value, val, index, component) {
		var span, text_value = state.numbers[index], text;

		return {
			c: function create() {
				span = createElement("span");
				text = createText(text_value);
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(span);
				span.className = "cell-number";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
				appendNode(text, span);
			},

			p: function update(changed, state, each_value, val, index) {
				if ((changed.numbers) && text_value !== (text_value = state.numbers[index])) {
					text.data = text_value;
				}
			},

			u: function unmount() {
				detachNode(span);
			},

			d: noop
		};
	}

	function input_handler(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, index = this._svelte.index, val = each_value[index];
		component.process(event, index);
	}

	function focus_handler(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, index = this._svelte.index, val = each_value[index];
		component.didFocus(event, index);
	}

	function keyup_handler(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, index = this._svelte.index, val = each_value[index];
		component.moveFocus(event, index);
	}

	function Crossword(options) {
		init(this, options);
		this.refs = {};
		this._state = assign(data(), options.data);
		this._recompute({ rows: 1, columns: 1, symmetric: 1, values: 1 }, this._state);

		if (!document.getElementById("svelte-2428691545-style")) add_css();

		var _oncreate = oncreate.bind(this);

		if (!options._root) {
			this._oncreate = [_oncreate];
		} else {
		 	this._root._oncreate.push(_oncreate);
		 }

		this._fragment = create_main_fragment(this._state, this);

		if (options.target) {
			this._fragment.c();
			this._fragment.m(options.target, options.anchor || null);

			callAll(this._oncreate);
		}
	}

	assign(Crossword.prototype, methods, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount
	 });

	Crossword.prototype._recompute = function _recompute(changed, state) {
		if (changed.rows || changed.columns) {
			if (differs(state.size, (state.size = size(state.rows, state.columns)))) changed.size = true;
		}

		if (changed.symmetric || changed.rows || changed.columns) {
			if (differs(state.transpose, (state.transpose = transpose(state.symmetric, state.rows, state.columns)))) changed.transpose = true;
		}

		if (changed.rows || changed.columns || changed.values) {
			if (differs(state.shareURL, (state.shareURL = shareURL(state.rows, state.columns, state.values)))) changed.shareURL = true;
		}
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function toNumber(value) {
		return value === '' ? undefined : +value;
	}

	function noop() {}

	function init(component, options) {
		component.options = options;

		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._root = options._root || component;
		component._yield = options._yield;
		component._bind = options._bind;
	}

	function assign(target) {
		var k,
			source,
			i = 1,
			len = arguments.length;
		for (; i < len; i++) {
			source = arguments[i];
			for (k in source) target[k] = source[k];
		}

		return target;
	}

	function callAll(fns) {
		while (fns && fns.length) fns.pop()();
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this._root._lock) return;
		this._root._lock = true;
		callAll(this._root._beforecreate);
		callAll(this._root._oncreate);
		callAll(this._root._aftercreate);
		this._root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign({}, oldState, newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}

	function _mount(target, anchor) {
		this._fragment.m(target, anchor);
	}

	function _unmount() {
		this._fragment.u();
	}

	function differs(a, b) {
		return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return Crossword;
}());